#!/bin/bash

{{ if .os.linux -}}
echo "ðŸ’¡ Updating apt..."
sudo apt update

echo "ðŸ’¡ Installing generic tooling (shell, utilities, ...)"
sudo apt install -y git locales keychain

sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment
sudo echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
sudo echo "LANG=en_US.UTF-8" > /etc/locale.conf
sudo locale-gen en_US.UTF-8

echo "ðŸ’¡ Installing sdkman dependencies..."
sudo apt install -y unzip zip curl

echo "ðŸ’¡ Installing pyenv dependencies..."
sudo apt install -y build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev curl llvm \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

echo "ðŸ’¡ Installing ruby-build dependencies..."
sudo apt install -y libyaml-dev

echo "ðŸ’¡ Installing n-install dependencies..."
sudo apt install -y make

echo "ðŸ’¡ Installing 1Password CLI..."
curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --batch --yes --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | sudo tee /etc/apt/sources.list.d/1password.list
sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --batch --yes --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
sudo apt update && sudo apt install 1password-cli

{{ if .os.macos -}}
echo "ðŸ’¡ Enabling SSH..."
sudo systemsetup -setremotelogin on
{{ end -}}

{{ if .os.wsl -}}
echo "ðŸ’¡ Enabling OpenSSH on WSL..."

sudo apt remove -y --purge openssh-server
sudo apt install -y openssh-server
sudo sed -i 's/#Port 22/Port 2222/g' /etc/ssh/sshd_config
sudo sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
sudo grep -qxF 'AllowUsers benc' /etc/ssh/sshd_config || echo 'AllowUsers benc' | sudo tee -a /etc/ssh/sshd_config
sudo service ssh --full-restart

sudo grep -qxF '%sudo ALL=NOPASSWD: /etc/init.d/ssh' /etc/sudoers || echo '%sudo ALL=NOPASSWD: /etc/init.d/ssh' | sudo EDITOR='tee -a' visudo

sudo touch /etc/wsl.conf
sudo grep -qxF '[boot]' /etc/wsl.conf || echo '[boot]' | sudo tee -a /etc/wsl.conf
sudo grep -qxF 'command = service ssh start' /etc/wsl.conf || echo 'command = service ssh start' | sudo tee -a /etc/wsl.conf

# you can access the SSH server through proxyjump

echo "ðŸ’¡ Enabling piping of 1password SSH agent to WSL..."
sudo apt install -y socat
{{ end -}}

echo "ðŸ’¡ Setting default shell to ZSH..."
sudo chsh -s /usr/bin/zsh $(whoami)
{{ end -}}

{{ if .os.macos -}}
if [ ! -f "/usr/local/bin/brew" ]; then
    echo "ðŸ’¡ Installing homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
{{ end -}}

{{ if .os.linux -}}
if [ ! -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    echo "ðŸ’¡ Installing homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
{{ end -}}

echo "ðŸ’¡ Installing generic tooling (shell, utilities, ...)"
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "zsh"
brew "eza"
brew "bat"
brew "ccat"
brew "fzf"
brew "btop"
brew "jq"
brew "ripgrep"
brew "xh"
brew "navi"
brew "starship"
brew "zoxide"
brew "sheldon"
brew "watch"
brew "grc"
brew "git"
brew "pandoc"
brew "procs"
brew "dust"
brew "duf"
brew "prettyping"
{{ if .os.macos -}}
brew "terminal-notifier"
brew "m-cli"
brew "mas"
{{ end -}}
EOF

if [ ! -d "${HOME}/.zplug" ]; then
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
fi

{{ if .os.macos -}}
echo "ðŸ’¡ Installing utilities..."
brew bundle --no-lock --file=/dev/stdin <<EOF
cask "1password/tap/1password-cli"
cask "tailscale"
cask "core-tunnel"
cask "bluetility"
cask "wireshark"
cask "warp"
brew "lilypond"
brew "ly"
EOF

echo "ðŸ’¡ Installing developer tools..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "coreutils"
brew "git"
brew "devcontainer"
brew "wrk"
brew "hyperfine"
brew "dive"
brew "ctop"
EOF

echo "ðŸ’¡ Installing sdkman dependencies..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "curl"
brew "zip"
brew "unzip"
EOF

echo "ðŸ’¡ Installing pyenv dependencies..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "openssl"
brew "readline"
brew "sqlite3"
brew "xz"
brew "zlib"
brew "tcl-tk"
EOF

echo "ðŸ’¡ Installing ruby-build dependencies..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "libyaml"
EOF

echo "ðŸ’¡ Installing powershell..."
brew bundle --no-lock --file=/dev/stdin <<EOF
cask "powershell"
EOF

{{ end -}}

echo "ðŸ’¡ Installing go..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "go"
EOF

echo "ðŸ’¡ Installing mutagen..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "mutagen-io/mutagen/mutagen"
EOF

echo "ðŸ’¡ Installing kubernetes tooling..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "k9s"
brew "kubernetes-cli"
brew "helm"
EOF

go install github.com/jrockway/kubectl-jq/cmd/kubectl-jq@latest

echo "ðŸ’¡ Installing data stuff..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "libpq"
brew "cypher-shell"
EOF

echo "ðŸ’¡ Installing AWS tooling..."
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "awscli"
brew "aws-iam-authenticator"
EOF

{{ if .os.macos -}}
echo "ðŸ’¡ Setting a couple of macos defaults..."

# Increase sound quality for Bluetooth headphones/headsets
defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

# Set language and text formats
defaults write NSGlobalDomain AppleLanguages -array "nl" "en"
defaults write NSGlobalDomain AppleLocale -string "nl_BE@currency=EUR"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
defaults write NSGlobalDomain AppleMetricUnits -bool true

# Always use exapnded print dialog
defaults write -g PMPrintingExpandedStateForPrint -bool TRUE

# Never go into computer sleep mode
sudo systemsetup -setcomputersleep Off > /dev/null

# Hibernate mode 3: Copy RAM to disk so the system state can still be restored in case of a power failure.
sudo pmset -a hibernatemode 3

# Enable powernap
sudo pmset -a powernap 1

# Disable lowpowermode
sudo pmset -a lowpowermode 0

# Save screenshots to the ~/Pictures/Screenshots folder
mkdir -p "${HOME}/Pictures/Screenshots"
defaults write com.apple.screencapture location -string "${HOME}/Pictures/Screenshots"

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Enable touch id for sudo
sudo {{ .chezmoi.sourceDir }}/scripts/sudo_touch_id/enable_sudo_touch_id.sh
{{ end -}}

echo "ðŸ’¡ Setting up version managers..."

if [ ! -d "${HOME}/.sdkman" ]; then
    echo "ðŸ’¡ Setting up SDKMan..."

    curl -s "https://get.sdkman.io?rcupdate=false" | bash
fi

sdk update

echo "ðŸ’¡ Installing java 11, java 17, gradle, maven..."
. "${HOME}/.sdkman/bin/sdkman-init.sh"
sdk install java {{ .java.v11 }}
sdk install java {{ .java.v17 }}
sdk install java {{ .java.v21 }}
sdk install gradle {{ .java.gradle }}
sdk install maven {{ .java.maven }}

# TODO what about asdf for python, ruby, java?
if [ ! -d "${HOME}/.pyenv" ]; then
    # Set up pyenv
    echo "ðŸ’¡ Setting up python (pyenv)..."

    curl https://pyenv.run | bash

    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

echo "ðŸ’¡ Installing python..."

cd "${HOME}/.pyenv/" && git pull && cd -
pyenv install --skip-existing {{ .python.version }}
pyenv global {{ .python.version }}

if [ ! -d "${HOME}/.n" ]; then
    echo "ðŸ’¡ Setting up node (n, avn)..."

    curl -L https://bit.ly/n-install | N_PREFIX=$HOME/.n bash -s -- -n -y

    export N_PREFIX="$HOME/.n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"

    $HOME/.n/bin/npm install -g npm avn avn-n
fi

if [ ! -d "${HOME}/.rbenv" ]; then
    echo "ðŸ’¡ Setting up ruby (rbenv)..."

    git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
fi

echo "ðŸ’¡ Installing ruby..."

git -C ~/.rbenv/plugins/ruby-build/ pull
eval "$(~/.rbenv/bin/rbenv init -)"

rbenv install --skip-existing {{ .ruby.version }}
rbenv global {{ .ruby.version }}

echo "ðŸ’¡ System initialisation done. Please open a new terminal now..."
