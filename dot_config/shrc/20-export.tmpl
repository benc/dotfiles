#!/bin/bash
export PATH=./my/bin/:$PATH

{{ if .os.wsl }}
# The boot.systemd in /etc/wsl.conf is only for Windows 11, so this workaround is needed
if service docker status 2>&1 | grep -q "is not running"; then
  wsl.exe -d "${WSL_DISTRO_NAME?}" -u root -e /usr/sbin/service docker start >/dev/null 2>&1
fi
{{ end }}

{{ if .os.macos }}
export PATH=/usr/local/bin:/usr/local/sbin:$PATH
{{ else if .os.linux }}

{{ end }}

# Go
if [ -r "${HOME}/go" ]; then
  # echo "ðŸ’¡ Loading go..."
  export PATH=$HOME/go/bin:$PATH
fi

# Java, ...: sdkman
if [ -r "${HOME}/.sdkman/bin/sdkman-init.sh" ]; then
  # echo "ðŸ’¡ Loading SDKMan..."
  export SDKMAN_DIR="${HOME}/.sdkman"
  # shellcheck disable=SC1091
  . "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

# Python: pyenv
if [ -r "${HOME}/.pyenv" ]; then
  # echo "ðŸ’¡ Loading pyenv..."
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init - --no-rehash)"
fi

# Node: n
if [ -r "${HOME}/.n" ]; then
  # echo "ðŸ’¡ Loading n..."
  export N_PREFIX="$HOME/.n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"
  export PATH=./node_modules/.bin:$PATH
fi

# Ruby: rbenv
if [ -r "${HOME}/.rbenv" ]; then
  # echo "ðŸ’¡ Loading rbenv..."
  eval "$(~/.rbenv/bin/rbenv init - zsh)"
fi

# Postgres
if [ -r "$(brew --prefix libpq)" ]; then
  export PATH="$(brew --prefix libpq)/bin:${PATH}"
fi

# kubernetes-cli
if [ -r "$(brew --prefix kubernetes-cli)" ]; then
  export PATH="$(brew --prefix kubernetes-cli)/bin:${PATH}"
fi

# Path
if [ -d "${HOME}/.local/bin" ]; then
  export PATH="${HOME}/.local/bin:${PATH}"
fi

# Path
if [ -d "${HOME}/bin" ]; then
  export PATH="${HOME}/bin:${PATH}"
fi

# add local commands to PATH
export PATH=./bin:$PATH

export VISUAL="{{ .editor }}"
export EDITOR="{{ .editor }}"

{{ if .os.wsl }}
export BROWSER="wslview"
{{ end }}

# # if ${HOME}/.pyenv exists and pyenv is installed, then initialize pyenv
# if [ -d "${HOME}/.pyenv" ] && command -v pyenv >/dev/null 2>&1; then
#   export PYENV_ROOT="${HOME}/.pyenv"
#   export PATH="${PYENV_ROOT}/bin:${PATH}"
#   eval "$(pyenv init --path)"
#   eval "$(pyenv init -)"
#   if which pyenv-virtualenv-init >/dev/null; then
#     eval "$(pyenv virtualenv-init -)"
#   fi
#   export PYENV_VIRTUALENV_DISABLE_PROMPT=1
# fi
